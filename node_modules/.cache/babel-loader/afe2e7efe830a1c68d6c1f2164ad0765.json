{"ast":null,"code":"\"use strict\";\n\nfunction t(t) {\n  return t && \"object\" == typeof t && \"default\" in t ? t.default : t;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nvar e,\n    n,\n    r,\n    o,\n    i = t(require(\"jsbi\")),\n    u = t(require(\"tiny-invariant\")),\n    a = (t(require(\"tiny-warning\")), require(\"@ethersproject/address\")),\n    s = t(require(\"big.js\")),\n    c = t(require(\"toformat\")),\n    d = t(require(\"decimal.js-light\")),\n    p = require(\"@ethersproject/solidity\"),\n    f = require(\"@ethersproject/contracts\"),\n    l = require(\"@ethersproject/networks\"),\n    h = require(\"@ethersproject/providers\"),\n    m = t(require(\"@uniswap/v2-core/build/IUniswapV2Pair.json\"));\n\n(n = exports.ChainId || (exports.ChainId = {}))[n.MAINNET = 1] = \"MAINNET\", n[n.ROPSTEN = 3] = \"ROPSTEN\", n[n.RINKEBY = 4] = \"RINKEBY\", n[n[\"GÖRLI\"] = 5] = \"GÖRLI\", n[n.KOVAN = 42] = \"KOVAN\", n[n.BNB = 56] = \"BNB\", n[n.tBNB = 97] = \"tBNB\", n[n.Polygon = 137] = \"Polygon\", n[n.Mumbai = 80001] = \"Mumbai\", (r = exports.TradeType || (exports.TradeType = {}))[r.EXACT_INPUT = 0] = \"EXACT_INPUT\", r[r.EXACT_OUTPUT = 1] = \"EXACT_OUTPUT\", (o = exports.Rounding || (exports.Rounding = {}))[o.ROUND_DOWN = 0] = \"ROUND_DOWN\", o[o.ROUND_HALF_UP = 1] = \"ROUND_HALF_UP\", o[o.ROUND_UP = 2] = \"ROUND_UP\";\nvar v,\n    y = \"0x52437d7bf55de30b66e0b13265233c3cc8672ece6c21beff7dd4309300973500\",\n    w = i.BigInt(1e3),\n    T = i.BigInt(0),\n    g = i.BigInt(1),\n    k = i.BigInt(2),\n    x = i.BigInt(3),\n    I = i.BigInt(5),\n    A = i.BigInt(10),\n    E = i.BigInt(100),\n    b = i.BigInt(997),\n    O = i.BigInt(1e3);\n!function (t) {\n  t.uint8 = \"uint8\", t.uint256 = \"uint256\";\n}(v || (v = {}));\nvar q = ((e = {})[v.uint8] = i.BigInt(\"0xff\"), e[v.uint256] = i.BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"), e);\n\nfunction N(t, e) {\n  for (var n = 0; n < e.length; n++) {\n    var r = e[n];\n    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);\n  }\n}\n\nfunction C(t, e, n) {\n  return e && N(t.prototype, e), n && N(t, n), t;\n}\n\nfunction P() {\n  return (P = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n      }\n    }\n\n    return t;\n  }).apply(this, arguments);\n}\n\nfunction B(t, e) {\n  t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;\n}\n\nfunction R(t) {\n  return (R = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  })(t);\n}\n\nfunction U(t, e) {\n  return (U = Object.setPrototypeOf || function (t, e) {\n    return t.__proto__ = e, t;\n  })(t, e);\n}\n\nfunction _() {\n  if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n  if (Reflect.construct.sham) return !1;\n  if (\"function\" == typeof Proxy) return !0;\n\n  try {\n    return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;\n  } catch (t) {\n    return !1;\n  }\n}\n\nfunction D(t, e, n) {\n  return (D = _() ? Reflect.construct : function (t, e, n) {\n    var r = [null];\n    r.push.apply(r, e);\n    var o = new (Function.bind.apply(t, r))();\n    return n && U(o, n.prototype), o;\n  }).apply(null, arguments);\n}\n\nfunction F(t) {\n  var e = \"function\" == typeof Map ? new Map() : void 0;\n  return (F = function F(t) {\n    if (null === t || -1 === Function.toString.call(t).indexOf(\"[native code]\")) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n\n    if (void 0 !== e) {\n      if (e.has(t)) return e.get(t);\n      e.set(t, n);\n    }\n\n    function n() {\n      return D(t, arguments, R(this).constructor);\n    }\n\n    return n.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: n,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), U(n, t);\n  })(t);\n}\n\nfunction S(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\n\nfunction j(t, e) {\n  (null == e || e > t.length) && (e = t.length);\n\n  for (var n = 0, r = new Array(e); n < e; n++) {\n    r[n] = t[n];\n  }\n\n  return r;\n}\n\nfunction H(t, e) {\n  var n;\n\n  if (\"undefined\" == typeof Symbol || null == t[Symbol.iterator]) {\n    if (Array.isArray(t) || (n = function (t, e) {\n      if (t) {\n        if (\"string\" == typeof t) return j(t, void 0);\n        var n = Object.prototype.toString.call(t).slice(8, -1);\n        return \"Object\" === n && t.constructor && (n = t.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(t) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? j(t, void 0) : void 0;\n      }\n    }(t)) || e && t && \"number\" == typeof t.length) {\n      n && (t = n);\n      var r = 0;\n      return function () {\n        return r >= t.length ? {\n          done: !0\n        } : {\n          done: !1,\n          value: t[r++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  return (n = t[Symbol.iterator]()).next.bind(n);\n}\n\nvar M = (\"setPrototypeOf\" in Object),\n    W = function (t) {\n  function e() {\n    var n;\n    return (n = t.call(this) || this).isInsufficientReservesError = !0, n.name = n.constructor.name, M && Object.setPrototypeOf(S(n), (this instanceof e ? this.constructor : void 0).prototype), n;\n  }\n\n  return B(e, t), e;\n}(F(Error)),\n    L = function (t) {\n  function e() {\n    var n;\n    return (n = t.call(this) || this).isInsufficientInputAmountError = !0, n.name = n.constructor.name, M && Object.setPrototypeOf(S(n), (this instanceof e ? this.constructor : void 0).prototype), n;\n  }\n\n  return B(e, t), e;\n}(F(Error));\n\nfunction X(t, e) {\n  i.greaterThanOrEqual(t, T) || u(!1), i.lessThanOrEqual(t, q[e]) || u(!1);\n}\n\nfunction K(t) {\n  try {\n    return a.getAddress(t);\n  } catch (t) {\n    u(!1);\n  }\n}\n\nfunction V(t) {\n  return t instanceof i ? t : i.BigInt(\"bigint\" == typeof t ? t.toString() : t);\n}\n\nfunction Y(t) {\n  X(t, v.uint256);\n  var e,\n      n = T;\n  if (i.greaterThan(t, x)) for (n = t, e = i.add(i.divide(t, k), g); i.lessThan(e, n);) {\n    n = e, e = i.divide(i.add(i.divide(t, e), e), k);\n  } else i.notEqual(t, T) && (n = g);\n  return n;\n}\n\nfunction G(t, e, n, r) {\n  if (n > 0 || u(!1), t.length <= n || u(!1), 0 === t.length) return t.push(e), null;\n  var o = t.length === n;\n  if (o && r(t[t.length - 1], e) <= 0) return e;\n\n  for (var i = 0, a = t.length; i < a;) {\n    var s = i + a >>> 1;\n    r(t[s], e) <= 0 ? i = s + 1 : a = s;\n  }\n\n  return t.splice(i, 0, e), o ? t.pop() : null;\n}\n\nvar J,\n    Q = function Q(t, e, n) {\n  X(i.BigInt(t), v.uint8), this.decimals = t, this.symbol = e, this.name = n;\n},\n    $ = Q.ETHER = new Q(18, \"ETH\", \"Ether\"),\n    z = function (t) {\n  function e(e, n, r, o, i) {\n    var u;\n    return (u = t.call(this, r, o, i) || this).chainId = e, u.address = K(n), u;\n  }\n\n  B(e, t);\n  var n = e.prototype;\n  return n.equals = function (t) {\n    return this === t || this.chainId === t.chainId && this.address === t.address;\n  }, n.sortsBefore = function (t) {\n    return this.chainId !== t.chainId && u(!1), this.address === t.address && u(!1), this.address.toLowerCase() < t.address.toLowerCase();\n  }, e;\n}(Q);\n\nfunction Z(t, e) {\n  return t instanceof z && e instanceof z ? t.equals(e) : !(t instanceof z || e instanceof z || t !== e);\n}\n\nvar tt,\n    et,\n    nt = ((J = {})[exports.ChainId.MAINNET] = new z(exports.ChainId.MAINNET, \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.ROPSTEN] = new z(exports.ChainId.ROPSTEN, \"0xc778417E063141139Fce010982780140Aa0cD5Ab\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.RINKEBY] = new z(exports.ChainId.RINKEBY, \"0xc778417E063141139Fce010982780140Aa0cD5Ab\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.GÖRLI] = new z(exports.ChainId.GÖRLI, \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.KOVAN] = new z(exports.ChainId.KOVAN, \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\", 18, \"WETH\", \"Wrapped Ether\"), J[exports.ChainId.BNB] = new z(exports.ChainId.BNB, \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\", 18, \"WBNB\", \"Wrapped BNB\"), J[exports.ChainId.tBNB] = new z(exports.ChainId.tBNB, \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\", 18, \"WBNB\", \"Wrapped BNB\"), J[exports.ChainId.Polygon] = new z(exports.ChainId.Polygon, \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\", 18, \"WMATIC\", \"Wrapped Matic\"), J[exports.ChainId.Mumbai] = new z(exports.ChainId.Mumbai, \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\", 18, \"WMATIC\", \"Wrapped Matic\"), J),\n    rt = c(d),\n    ot = c(s),\n    it = ((tt = {})[exports.Rounding.ROUND_DOWN] = rt.ROUND_DOWN, tt[exports.Rounding.ROUND_HALF_UP] = rt.ROUND_HALF_UP, tt[exports.Rounding.ROUND_UP] = rt.ROUND_UP, tt),\n    ut = ((et = {})[exports.Rounding.ROUND_DOWN] = 0, et[exports.Rounding.ROUND_HALF_UP] = 1, et[exports.Rounding.ROUND_UP] = 3, et),\n    at = function () {\n  function t(t, e) {\n    void 0 === e && (e = g), this.numerator = V(t), this.denominator = V(e);\n  }\n\n  var e = t.prototype;\n  return e.invert = function () {\n    return new t(this.denominator, this.numerator);\n  }, e.add = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return i.equal(this.denominator, n.denominator) ? new t(i.add(this.numerator, n.numerator), this.denominator) : new t(i.add(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)), i.multiply(this.denominator, n.denominator));\n  }, e.subtract = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return i.equal(this.denominator, n.denominator) ? new t(i.subtract(this.numerator, n.numerator), this.denominator) : new t(i.subtract(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator)), i.multiply(this.denominator, n.denominator));\n  }, e.lessThan = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return i.lessThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n  }, e.equalTo = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return i.equal(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n  }, e.greaterThan = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return i.greaterThan(i.multiply(this.numerator, n.denominator), i.multiply(n.numerator, this.denominator));\n  }, e.multiply = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return new t(i.multiply(this.numerator, n.numerator), i.multiply(this.denominator, n.denominator));\n  }, e.divide = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return new t(i.multiply(this.numerator, n.denominator), i.multiply(this.denominator, n.numerator));\n  }, e.toSignificant = function (t, e, n) {\n    void 0 === e && (e = {\n      groupSeparator: \"\"\n    }), void 0 === n && (n = exports.Rounding.ROUND_HALF_UP), Number.isInteger(t) || u(!1), t > 0 || u(!1), rt.set({\n      precision: t + 1,\n      rounding: it[n]\n    });\n    var r = new rt(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(t);\n    return r.toFormat(r.decimalPlaces(), e);\n  }, e.toFixed = function (t, e, n) {\n    return void 0 === e && (e = {\n      groupSeparator: \"\"\n    }), void 0 === n && (n = exports.Rounding.ROUND_HALF_UP), Number.isInteger(t) || u(!1), t >= 0 || u(!1), ot.DP = t, ot.RM = ut[n], new ot(this.numerator.toString()).div(this.denominator.toString()).toFormat(t, e);\n  }, C(t, [{\n    key: \"quotient\",\n    get: function get() {\n      return i.divide(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new t(i.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]), t;\n}(),\n    st = c(s),\n    ct = function (t) {\n  function e(e, n) {\n    var r,\n        o = V(n);\n    return X(o, v.uint256), (r = t.call(this, o, i.exponentiate(A, i.BigInt(e.decimals))) || this).currency = e, r;\n  }\n\n  B(e, t), e.ether = function (t) {\n    return new e($, t);\n  };\n  var n = e.prototype;\n  return n.add = function (t) {\n    return Z(this.currency, t.currency) || u(!1), new e(this.currency, i.add(this.raw, t.raw));\n  }, n.subtract = function (t) {\n    return Z(this.currency, t.currency) || u(!1), new e(this.currency, i.subtract(this.raw, t.raw));\n  }, n.toSignificant = function (e, n, r) {\n    return void 0 === e && (e = 6), void 0 === r && (r = exports.Rounding.ROUND_DOWN), t.prototype.toSignificant.call(this, e, n, r);\n  }, n.toFixed = function (e, n, r) {\n    return void 0 === e && (e = this.currency.decimals), void 0 === r && (r = exports.Rounding.ROUND_DOWN), e <= this.currency.decimals || u(!1), t.prototype.toFixed.call(this, e, n, r);\n  }, n.toExact = function (t) {\n    return void 0 === t && (t = {\n      groupSeparator: \"\"\n    }), st.DP = this.currency.decimals, new st(this.numerator.toString()).div(this.denominator.toString()).toFormat(t);\n  }, C(e, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]), e;\n}(at),\n    dt = function (t) {\n  function e(e, n) {\n    var r;\n    return (r = t.call(this, e, n) || this).token = e, r;\n  }\n\n  B(e, t);\n  var n = e.prototype;\n  return n.add = function (t) {\n    return this.token.equals(t.token) || u(!1), new e(this.token, i.add(this.raw, t.raw));\n  }, n.subtract = function (t) {\n    return this.token.equals(t.token) || u(!1), new e(this.token, i.subtract(this.raw, t.raw));\n  }, e;\n}(ct),\n    pt = function (t) {\n  function e(e, n, r, o) {\n    var u;\n    return (u = t.call(this, o, r) || this).baseCurrency = e, u.quoteCurrency = n, u.scalar = new at(i.exponentiate(A, i.BigInt(e.decimals)), i.exponentiate(A, i.BigInt(n.decimals))), u;\n  }\n\n  B(e, t), e.fromRoute = function (t) {\n    for (var n, r = [], o = H(t.pairs.entries()); !(n = o()).done;) {\n      var i = n.value,\n          u = i[1];\n      r.push(t.path[i[0]].equals(u.token0) ? new e(u.reserve0.currency, u.reserve1.currency, u.reserve0.raw, u.reserve1.raw) : new e(u.reserve1.currency, u.reserve0.currency, u.reserve1.raw, u.reserve0.raw));\n    }\n\n    return r.slice(1).reduce(function (t, e) {\n      return t.multiply(e);\n    }, r[0]);\n  };\n  var n = e.prototype;\n  return n.invert = function () {\n    return new e(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }, n.multiply = function (n) {\n    Z(this.quoteCurrency, n.baseCurrency) || u(!1);\n    var r = t.prototype.multiply.call(this, n);\n    return new e(this.baseCurrency, n.quoteCurrency, r.denominator, r.numerator);\n  }, n.quote = function (e) {\n    return Z(e.currency, this.baseCurrency) || u(!1), this.quoteCurrency instanceof z ? new dt(this.quoteCurrency, t.prototype.multiply.call(this, e.raw).quotient) : ct.ether(t.prototype.multiply.call(this, e.raw).quotient);\n  }, n.toSignificant = function (t, e, n) {\n    return void 0 === t && (t = 6), this.adjusted.toSignificant(t, e, n);\n  }, n.toFixed = function (t, e, n) {\n    return void 0 === t && (t = 4), this.adjusted.toFixed(t, e, n);\n  }, C(e, [{\n    key: \"raw\",\n    get: function get() {\n      return new at(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return t.prototype.multiply.call(this, this.scalar);\n    }\n  }]), e;\n}(at),\n    ft = {},\n    lt = function () {\n  function t(e, n) {\n    var r = e.token.sortsBefore(n.token) ? [e, n] : [n, e];\n    this.liquidityToken = new z(r[0].token.chainId, t.getAddress(r[0].token, r[1].token), 18, \"UNI-V2\", \"Uniswap V2\"), this.tokenAmounts = r;\n  }\n\n  t.getAddress = function (t, e) {\n    var n,\n        r,\n        o,\n        i,\n        u,\n        s = t.sortsBefore(e) ? [t, e] : [e, t];\n    return void 0 === (null === (n = ft) || void 0 === n || null === (r = n[s[0].address]) || void 0 === r ? void 0 : r[s[1].address]) && (ft = P({}, ft, ((u = {})[s[0].address] = P({}, null === (o = ft) || void 0 === o ? void 0 : o[s[0].address], ((i = {})[s[1].address] = a.getCreate2Address(\"0x0390D8f4E0667f70A99361891125d3E22AEb4a39\", p.keccak256([\"bytes\"], [p.pack([\"address\", \"address\"], [s[0].address, s[1].address])]), y), i)), u))), ft[s[0].address][s[1].address];\n  };\n\n  var e = t.prototype;\n  return e.involvesToken = function (t) {\n    return t.equals(this.token0) || t.equals(this.token1);\n  }, e.priceOf = function (t) {\n    return this.involvesToken(t) || u(!1), t.equals(this.token0) ? this.token0Price : this.token1Price;\n  }, e.reserveOf = function (t) {\n    return this.involvesToken(t) || u(!1), t.equals(this.token0) ? this.reserve0 : this.reserve1;\n  }, e.getOutputAmount = function (e) {\n    if (this.involvesToken(e.token) || u(!1), i.equal(this.reserve0.raw, T) || i.equal(this.reserve1.raw, T)) throw new W();\n    var n = this.reserveOf(e.token),\n        r = this.reserveOf(e.token.equals(this.token0) ? this.token1 : this.token0),\n        o = i.multiply(e.raw, b),\n        a = i.multiply(o, r.raw),\n        s = i.add(i.multiply(n.raw, O), o),\n        c = new dt(e.token.equals(this.token0) ? this.token1 : this.token0, i.divide(a, s));\n    if (i.equal(c.raw, T)) throw new L();\n    return [c, new t(n.add(e), r.subtract(c))];\n  }, e.getInputAmount = function (e) {\n    if (this.involvesToken(e.token) || u(!1), i.equal(this.reserve0.raw, T) || i.equal(this.reserve1.raw, T) || i.greaterThanOrEqual(e.raw, this.reserveOf(e.token).raw)) throw new W();\n    var n = this.reserveOf(e.token),\n        r = this.reserveOf(e.token.equals(this.token0) ? this.token1 : this.token0),\n        o = i.multiply(i.multiply(r.raw, e.raw), O),\n        a = i.multiply(i.subtract(n.raw, e.raw), b),\n        s = new dt(e.token.equals(this.token0) ? this.token1 : this.token0, i.add(i.divide(o, a), g));\n    return [s, new t(r.add(s), n.subtract(e))];\n  }, e.getLiquidityMinted = function (t, e, n) {\n    t.token.equals(this.liquidityToken) || u(!1);\n    var r,\n        o = e.token.sortsBefore(n.token) ? [e, n] : [n, e];\n    if (o[0].token.equals(this.token0) && o[1].token.equals(this.token1) || u(!1), i.equal(t.raw, T)) r = i.subtract(Y(i.multiply(o[0].raw, o[1].raw)), w);else {\n      var a = i.divide(i.multiply(o[0].raw, t.raw), this.reserve0.raw),\n          s = i.divide(i.multiply(o[1].raw, t.raw), this.reserve1.raw);\n      r = i.lessThanOrEqual(a, s) ? a : s;\n    }\n    if (!i.greaterThan(r, T)) throw new L();\n    return new dt(this.liquidityToken, r);\n  }, e.getLiquidityValue = function (t, e, n, r, o) {\n    var a;\n\n    if (void 0 === r && (r = !1), this.involvesToken(t) || u(!1), e.token.equals(this.liquidityToken) || u(!1), n.token.equals(this.liquidityToken) || u(!1), i.lessThanOrEqual(n.raw, e.raw) || u(!1), r) {\n      o || u(!1);\n      var s = V(o);\n      if (i.equal(s, T)) a = e;else {\n        var c = Y(i.multiply(this.reserve0.raw, this.reserve1.raw)),\n            d = Y(s);\n\n        if (i.greaterThan(c, d)) {\n          var p = i.multiply(e.raw, i.subtract(c, d)),\n              f = i.add(i.multiply(c, I), d),\n              l = i.divide(p, f);\n          a = e.add(new dt(this.liquidityToken, l));\n        } else a = e;\n      }\n    } else a = e;\n\n    return new dt(t, i.divide(i.multiply(n.raw, this.reserveOf(t).raw), a.raw));\n  }, C(t, [{\n    key: \"token0Price\",\n    get: function get() {\n      return new pt(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      return new pt(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]), t;\n}(),\n    ht = function () {\n  function t(t, e, n) {\n    t.length > 0 || u(!1), t.every(function (e) {\n      return e.chainId === t[0].chainId;\n    }) || u(!1), e instanceof z && t[0].involvesToken(e) || e === $ && t[0].involvesToken(nt[t[0].chainId]) || u(!1), void 0 === n || n instanceof z && t[t.length - 1].involvesToken(n) || n === $ && t[t.length - 1].involvesToken(nt[t[0].chainId]) || u(!1);\n\n    for (var r, o = [e instanceof z ? e : nt[t[0].chainId]], i = H(t.entries()); !(r = i()).done;) {\n      var a = r.value,\n          s = a[1],\n          c = o[a[0]];\n      c.equals(s.token0) || c.equals(s.token1) || u(!1);\n      var d = c.equals(s.token0) ? s.token1 : s.token0;\n      o.push(d);\n    }\n\n    this.pairs = t, this.path = o, this.midPrice = pt.fromRoute(this), this.input = e, this.output = null != n ? n : o[o.length - 1];\n  }\n\n  return C(t, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]), t;\n}(),\n    mt = new at(E),\n    vt = function (t) {\n  function e() {\n    return t.apply(this, arguments) || this;\n  }\n\n  B(e, t);\n  var n = e.prototype;\n  return n.toSignificant = function (t, e, n) {\n    return void 0 === t && (t = 5), this.multiply(mt).toSignificant(t, e, n);\n  }, n.toFixed = function (t, e, n) {\n    return void 0 === t && (t = 2), this.multiply(mt).toFixed(t, e, n);\n  }, e;\n}(at);\n\nfunction yt(t, e) {\n  return Z(t.inputAmount.currency, e.inputAmount.currency) || u(!1), Z(t.outputAmount.currency, e.outputAmount.currency) || u(!1), t.outputAmount.equalTo(e.outputAmount) ? t.inputAmount.equalTo(e.inputAmount) ? 0 : t.inputAmount.lessThan(e.inputAmount) ? -1 : 1 : t.outputAmount.lessThan(e.outputAmount) ? 1 : -1;\n}\n\nfunction wt(t, e) {\n  var n = yt(t, e);\n  return 0 !== n ? n : t.priceImpact.lessThan(e.priceImpact) ? -1 : t.priceImpact.greaterThan(e.priceImpact) ? 1 : t.route.path.length - e.route.path.length;\n}\n\nfunction Tt(t, e) {\n  return t instanceof dt ? t : t.currency === $ ? new dt(nt[e], t.raw) : void u(!1);\n}\n\nfunction gt(t, e) {\n  return t instanceof z ? t : t === $ ? nt[e] : void u(!1);\n}\n\nvar kt = function () {\n  function t(t, e, n) {\n    var r,\n        o,\n        i,\n        a = new Array(t.path.length),\n        s = new Array(t.pairs.length);\n\n    if (n === exports.TradeType.EXACT_INPUT) {\n      Z(e.currency, t.input) || u(!1), a[0] = Tt(e, t.chainId);\n\n      for (var c = 0; c < t.path.length - 1; c++) {\n        var d = t.pairs[c].getOutputAmount(a[c]),\n            p = d[1];\n        a[c + 1] = d[0], s[c] = p;\n      }\n    } else {\n      Z(e.currency, t.output) || u(!1), a[a.length - 1] = Tt(e, t.chainId);\n\n      for (var f = t.path.length - 1; f > 0; f--) {\n        var l = t.pairs[f - 1].getInputAmount(a[f]),\n            h = l[1];\n        a[f - 1] = l[0], s[f - 1] = h;\n      }\n    }\n\n    this.route = t, this.tradeType = n, this.inputAmount = n === exports.TradeType.EXACT_INPUT ? e : t.input === $ ? ct.ether(a[0].raw) : a[0], this.outputAmount = n === exports.TradeType.EXACT_OUTPUT ? e : t.output === $ ? ct.ether(a[a.length - 1].raw) : a[a.length - 1], this.executionPrice = new pt(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw), this.nextMidPrice = pt.fromRoute(new ht(s, t.input)), this.priceImpact = (r = this.outputAmount, i = (o = t.midPrice.raw.multiply(this.inputAmount.raw)).subtract(r.raw).divide(o), new vt(i.numerator, i.denominator));\n  }\n\n  t.exactIn = function (e, n) {\n    return new t(e, n, exports.TradeType.EXACT_INPUT);\n  }, t.exactOut = function (e, n) {\n    return new t(e, n, exports.TradeType.EXACT_OUTPUT);\n  };\n  var e = t.prototype;\n  return e.minimumAmountOut = function (t) {\n    if (t.lessThan(T) && u(!1), this.tradeType === exports.TradeType.EXACT_OUTPUT) return this.outputAmount;\n    var e = new at(g).add(t).invert().multiply(this.outputAmount.raw).quotient;\n    return this.outputAmount instanceof dt ? new dt(this.outputAmount.token, e) : ct.ether(e);\n  }, e.maximumAmountIn = function (t) {\n    if (t.lessThan(T) && u(!1), this.tradeType === exports.TradeType.EXACT_INPUT) return this.inputAmount;\n    var e = new at(g).add(t).multiply(this.inputAmount.raw).quotient;\n    return this.inputAmount instanceof dt ? new dt(this.inputAmount.token, e) : ct.ether(e);\n  }, t.bestTradeExactIn = function (e, n, r, o, i, a, s) {\n    var c = void 0 === o ? {} : o,\n        d = c.maxNumResults,\n        p = void 0 === d ? 3 : d,\n        f = c.maxHops,\n        l = void 0 === f ? 3 : f;\n    void 0 === i && (i = []), void 0 === a && (a = n), void 0 === s && (s = []), e.length > 0 || u(!1), l > 0 || u(!1), a === n || i.length > 0 || u(!1);\n    var h = n instanceof dt ? n.token.chainId : r instanceof z ? r.chainId : void 0;\n    void 0 === h && u(!1);\n\n    for (var m = Tt(n, h), v = gt(r, h), y = 0; y < e.length; y++) {\n      var w = e[y];\n\n      if ((w.token0.equals(m.token) || w.token1.equals(m.token)) && !w.reserve0.equalTo(T) && !w.reserve1.equalTo(T)) {\n        var g = void 0;\n\n        try {\n          g = w.getOutputAmount(m)[0];\n        } catch (t) {\n          if (t.isInsufficientInputAmountError) continue;\n          throw t;\n        }\n\n        if (g.token.equals(v)) G(s, new t(new ht([].concat(i, [w]), a.currency, r), a, exports.TradeType.EXACT_INPUT), p, wt);else if (l > 1 && e.length > 1) {\n          var k = e.slice(0, y).concat(e.slice(y + 1, e.length));\n          t.bestTradeExactIn(k, g, r, {\n            maxNumResults: p,\n            maxHops: l - 1\n          }, [].concat(i, [w]), a, s);\n        }\n      }\n    }\n\n    return s;\n  }, t.bestTradeExactOut = function (e, n, r, o, i, a, s) {\n    var c = void 0 === o ? {} : o,\n        d = c.maxNumResults,\n        p = void 0 === d ? 3 : d,\n        f = c.maxHops,\n        l = void 0 === f ? 3 : f;\n    void 0 === i && (i = []), void 0 === a && (a = r), void 0 === s && (s = []), e.length > 0 || u(!1), l > 0 || u(!1), a === r || i.length > 0 || u(!1);\n    var h = r instanceof dt ? r.token.chainId : n instanceof z ? n.chainId : void 0;\n    void 0 === h && u(!1);\n\n    for (var m = Tt(r, h), v = gt(n, h), y = 0; y < e.length; y++) {\n      var w = e[y];\n\n      if ((w.token0.equals(m.token) || w.token1.equals(m.token)) && !w.reserve0.equalTo(T) && !w.reserve1.equalTo(T)) {\n        var g = void 0;\n\n        try {\n          g = w.getInputAmount(m)[0];\n        } catch (t) {\n          if (t.isInsufficientReservesError) continue;\n          throw t;\n        }\n\n        if (g.token.equals(v)) G(s, new t(new ht([w].concat(i), n, a.currency), a, exports.TradeType.EXACT_OUTPUT), p, wt);else if (l > 1 && e.length > 1) {\n          var k = e.slice(0, y).concat(e.slice(y + 1, e.length));\n          t.bestTradeExactOut(k, n, g, {\n            maxNumResults: p,\n            maxHops: l - 1\n          }, [w].concat(i), a, s);\n        }\n      }\n    }\n\n    return s;\n  }, t;\n}();\n\nfunction xt(t) {\n  return \"0x\" + t.raw.toString(16);\n}\n\nvar It,\n    At = function () {\n  function t() {}\n\n  return t.swapCallParameters = function (t, e) {\n    var n = t.inputAmount.currency === $,\n        r = t.outputAmount.currency === $;\n    n && r && u(!1), e.ttl > 0 || u(!1);\n    var o,\n        i,\n        a,\n        s = K(e.recipient),\n        c = xt(t.maximumAmountIn(e.allowedSlippage)),\n        d = xt(t.minimumAmountOut(e.allowedSlippage)),\n        p = t.route.path.map(function (t) {\n      return t.address;\n    }),\n        f = \"0x\" + (Math.floor(new Date().getTime() / 1e3) + e.ttl).toString(16),\n        l = Boolean(e.feeOnTransfer);\n\n    switch (t.tradeType) {\n      case exports.TradeType.EXACT_INPUT:\n        n ? (o = l ? \"swapExactETHForTokensSupportingFeeOnTransferTokens\" : \"swapExactETHForTokens\", i = [d, p, s, f], a = c) : r ? (o = l ? \"swapExactTokensForETHSupportingFeeOnTransferTokens\" : \"swapExactTokensForETH\", i = [c, d, p, s, f], a = \"0x0\") : (o = l ? \"swapExactTokensForTokensSupportingFeeOnTransferTokens\" : \"swapExactTokensForTokens\", i = [c, d, p, s, f], a = \"0x0\");\n        break;\n\n      case exports.TradeType.EXACT_OUTPUT:\n        l && u(!1), n ? (o = \"swapETHForExactTokens\", i = [d, p, s, f], a = c) : r ? (o = \"swapTokensForExactETH\", i = [d, c, p, s, f], a = \"0x0\") : (o = \"swapTokensForExactTokens\", i = [d, c, p, s, f], a = \"0x0\");\n    }\n\n    return {\n      methodName: o,\n      args: i,\n      value: a\n    };\n  }, t;\n}(),\n    Et = [{\n  constant: !0,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}],\n    bt = ((It = {})[exports.ChainId.MAINNET] = {\n  \"0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A\": 9\n}, It),\n    Ot = function () {\n  function t() {}\n\n  return t.fetchTokenData = function (t, e, n, r, o) {\n    try {\n      var i,\n          u,\n          a = function a(n) {\n        return new z(t, e, n, r, o);\n      };\n\n      void 0 === n && (n = h.getDefaultProvider(l.getNetwork(t)));\n      var s = \"number\" == typeof (null === (i = bt) || void 0 === i || null === (u = i[t]) || void 0 === u ? void 0 : u[e]);\n      return Promise.resolve(s ? a(bt[t][e]) : Promise.resolve(new f.Contract(e, Et, n).decimals().then(function (n) {\n        var r, o, i;\n        return bt = P({}, bt, ((i = {})[t] = P({}, null === (r = bt) || void 0 === r ? void 0 : r[t], ((o = {})[e] = n, o)), i)), n;\n      })).then(a));\n    } catch (t) {\n      return Promise.reject(t);\n    }\n  }, t.fetchPairData = function (t, e, n) {\n    try {\n      void 0 === n && (n = h.getDefaultProvider(l.getNetwork(t.chainId))), t.chainId !== e.chainId && u(!1);\n      var r = lt.getAddress(t, e);\n      return Promise.resolve(new f.Contract(r, m.abi, n).getReserves()).then(function (n) {\n        var r = n[0],\n            o = n[1],\n            i = t.sortsBefore(e) ? [r, o] : [o, r];\n        return new lt(new dt(t, i[0]), new dt(e, i[1]));\n      });\n    } catch (t) {\n      return Promise.reject(t);\n    }\n  }, t;\n}();\n\nexports.JSBI = i, exports.Currency = Q, exports.CurrencyAmount = ct, exports.ETHER = $, exports.FACTORY_ADDRESS = \"0x0390D8f4E0667f70A99361891125d3E22AEb4a39\", exports.Fetcher = Ot, exports.Fraction = at, exports.INIT_CODE_HASH = y, exports.InsufficientInputAmountError = L, exports.InsufficientReservesError = W, exports.MINIMUM_LIQUIDITY = w, exports.Pair = lt, exports.Percent = vt, exports.Price = pt, exports.Route = ht, exports.Router = At, exports.Token = z, exports.TokenAmount = dt, exports.Trade = kt, exports.WETH = nt, exports.currencyEquals = Z, exports.inputOutputComparator = yt, exports.tradeComparator = wt;","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","Error","name","_this","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","invariant","greaterThanOrEqual","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","BNB","tBNB","Polygon","Mumbai","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","remainder","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","groupSeparator","rounding","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","CurrencyAmount","ether","amount","currency","parsedAmount","exponentiate","raw","toExact","TokenAmount","token","Price","fromRoute","route","prices","pair","pairs","entries","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","baseCurrency","quoteCurrency","scalar","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","exactIn","amountIn","EXACT_INPUT","exactOut","amountOut","EXACT_OUTPUT","tradeType","amounts","Array","nextPairs","i","nextPair","executionPrice","nextMidPrice","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","maxNumResults","maxHops","currentPairs","originalAmountIn","bestTrades","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","getDefaultProvider","getNetwork","parsedDecimals","Contract","ERC20","then","fetchPairData","reserves0","reserves1","IUniswapV2Pair","abi","getReserves","balances"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1, //eth主链\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  BNB = 56, //bsc主链\n  tBNB = 97, //bsc测试链\n  Polygon = 137, //Polygon主链\n  Mumbai= 80001 //Polygon测试链\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x0390D8f4E0667f70A99361891125d3E22AEb4a39'\n\nexport const INIT_CODE_HASH = '0x52437d7bf55de30b66e0b13265233c3cc8672ece6c21beff7dd4309300973500'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.BNB]: new Token(ChainId.BNB, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.tBNB]: new Token(ChainId.tBNB, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.Polygon]: new Token(ChainId.Polygon, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.Mumbai]: new Token(ChainId.Mumbai, '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889', 18, 'WMATIC', 'Wrapped Matic')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}